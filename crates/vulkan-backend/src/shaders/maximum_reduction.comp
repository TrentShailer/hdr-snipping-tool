#version 450

// Get f16 capabilities
#if defined(GL_AMD_gpu_shader_half_float)
	#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_NV_gpu_shader5)
	#extension GL_NV_gpu_shader5 : require
#else
	#error No extension available for FP16.
#endif

// Get subgroup f16 capabilities
#extension GL_EXT_shader_subgroup_extended_types_float16 : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable


const uint WORKGROUP_SIZE = 1024;
const float16_t OUT_OF_BOUNDS_VALUE = -65504.0hf;

layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) buffer InputLayout
{
    float16_t input_buffer[];
};

layout(set = 0, binding = 1) buffer OutputLayout
{
    float16_t output_buffer[];
};

layout(push_constant) uniform PushConstants {
	uint input_length;
};

shared float16_t shared_data[WORKGROUP_SIZE];

void main() {
	uint thread_id = gl_LocalInvocationID.x;
	uint index = gl_WorkGroupID.x * WORKGROUP_SIZE * gl_SubgroupSize * 2 + thread_id;	// Starting index for this thread

	// Each thread should have a value to work on to ensure maximum utilisation
	// Subgroups are used to quickly reduce the number of items that are needed to be recursively reduced
	for (uint i = 0; i < gl_SubgroupSize; i++) {
		// Each invocation in each iteration fetches two values
		// and computes the maximum before sending that value
		// to be reduced in the subgroup
		// this improves performance a little
		uint fetch_index = index + i * (WORKGROUP_SIZE * 2);
		uint fetch_index_2 = fetch_index + WORKGROUP_SIZE;

		float16_t fetch_value = OUT_OF_BOUNDS_VALUE; // Handle out of bounds by using a very small number
		if (fetch_index < input_length) {
			if (fetch_index_2 < input_length) {
				fetch_value = max(input_buffer[fetch_index], input_buffer[fetch_index_2]);
			}
			else {
				fetch_value = input_buffer[fetch_index];
			}
		}

		float16_t iteration_maximum = subgroupMax(fetch_value);
		// If the iteration is finding a result for this subgroup invocation
		// then store the value for use later in shared memory
		if (gl_SubgroupInvocationID == i) {
			shared_data[thread_id] = iteration_maximum;
		}
	}
	// synchronise threads to ensure shared_data is full before proceding with the reduction
	barrier();

	// Recusively reduce the numbers in shared memory
	for (uint s = WORKGROUP_SIZE / 2; s > 0; s>>=1) {
		if (thread_id < s) {
			shared_data[thread_id] = max(shared_data[thread_id], shared_data[thread_id + s]);
		}
		barrier();
	}

	// After reduction is complete the first thread can store the value this invocation has computed
	if (thread_id == 0) {
		output_buffer[gl_WorkGroupID.x] = shared_data[0];
	}
}
