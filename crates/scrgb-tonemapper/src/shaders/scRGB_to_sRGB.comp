// glslc scRGB_to_sRGB.comp -o scRGB_to_sRGB.spv

#version 450
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(constant_id = 0) const float whitepoint = 3.5;

layout(set = 0, binding = 0, rgba16f) uniform image2D input_image;
layout(set = 0, binding = 1, rgba8) uniform image2D output_image;

// Performs gamma correction to tonemap linear RGB to sRGB
// From https://en.wikipedia.org/wiki/SRGB#Transformation
float scRGB_to_sRGB(float value) {
	float gamma_decode = 1.0 / 2.4;

	float clamped_value = clamp(value, 0.0, whitepoint);
	float scaled_value = clamped_value / whitepoint;

	if (scaled_value <= 0.0031308) {
		return clamp(12.92 * scaled_value, 0.0, 1.0);
	}
	else {
		return clamp(1.055 * pow(scaled_value, gamma_decode) - 0.055, 0.0, 1.0);
	}
}

void main() {
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

	vec4 scRGB = imageLoad(input_image, pixel);

	vec4 sRGB = vec4(
		scRGB_to_sRGB(scRGB.r),
		scRGB_to_sRGB(scRGB.g),
		scRGB_to_sRGB(scRGB.b),
		scRGB.a
	);

	imageStore(output_image, pixel, sRGB);
}

