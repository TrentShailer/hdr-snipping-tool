#version 450

// glslc tonemap.comp -o tonemap.spv

const uint WORKGROUP_SIZE = 32;

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;


layout(set = 0, binding = 0) buffer InputLayout
{
    float16_t input_buffer[];
};

layout(set = 0, binding = 1, rgba8) uniform image2D output_image;

layout(set = 1, binding = 0) uniform Config
{
	uint input_width;
	uint input_height;
	float16_t alpha;
	float16_t gamma;
	float16_t maximum;
};

// float16_t tonemap(float16_t value) {
// 	float16_t ratio = value/maximum;
// 	return alpha * (-exp(-gamma * ratio) * (1.0hf - ratio) + 1.0hf);
// }

float16_t tonemap(float16_t value) {
	float16_t ratio = value/maximum;
	return clamp(alpha * pow(ratio, gamma), 0.0hf, 1.0hf);
}

void main() {
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

	if (pixel.x > input_width) {
		return;
	}
	if (pixel.y > input_height) {
		return;
	}

	uint pixel_index_1d = (pixel.y * input_width + pixel.x) * 4;

	float16_t r_in = input_buffer[pixel_index_1d];
	float16_t g_in = input_buffer[pixel_index_1d + 1];
	float16_t b_in = input_buffer[pixel_index_1d + 2];
	float16_t a_in = input_buffer[pixel_index_1d + 3];



	float r_out = float(tonemap(r_in));
	float g_out = float(tonemap(g_in));
	float b_out = float(tonemap(b_in));
	float a_out = float(a_in);

	vec4 out_color = vec4(r_out, g_out, b_out, a_out);

	imageStore(output_image, pixel, out_color);
}

