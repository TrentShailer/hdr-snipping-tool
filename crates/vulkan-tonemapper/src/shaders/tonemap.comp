#version 450

// glslc tonemap.comp -o tonemap.spv

#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable

const uint WORKGROUP_SIZE = 32;

layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(push_constant) uniform Config
{
	uint input_width;
	uint input_height;
	float alpha;
	float gamma;
	float maximum;
};

layout(set = 0, binding = 0) buffer InputLayout
{
    float16_t input_buffer[];
};

layout(set = 0, binding = 1, rgba8) uniform image2D output_image;

float reinhard(float16_t value) {
	float ratio = value/maximum;
	return clamp(value / (value + 1.0), 0.0, 1.0);
}

float gamma_correct(float16_t value) {
	float ratio = value/maximum;

	return clamp(alpha * pow(ratio, gamma), 0.0, 1.0);
}

// Performs gamma correction to convert linear RGB values to sRGB
// From https://en.wikipedia.org/wiki/SRGB#Transformation
float gamma_correct_linear(float16_t value) {
	float ratio = value/maximum; // TODO obtain maximum differently

	if (ratio <= 0.0031308) {
		return clamp(12.92 * ratio, 0.0, 1.0);
	}
	else {
		return clamp(1.055 * pow(ratio, (1.0/2.4)) - 0.055, 0.0, 1.0);
	}
}

void main() {
	ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);

	if (pixel.x > input_width) {
		return;
	}
	if (pixel.y > input_height) {
		return;
	}

	uint pixel_index_1d = (pixel.y * input_width + pixel.x) * 4;

	float16_t r_in = input_buffer[pixel_index_1d];
	float16_t g_in = input_buffer[pixel_index_1d + 1];
	float16_t b_in = input_buffer[pixel_index_1d + 2];
	float16_t a_in = input_buffer[pixel_index_1d + 3];



	float r_out = gamma_correct_linear(r_in);
	float g_out = gamma_correct_linear(g_in);
	float b_out = gamma_correct_linear(b_in);
	float a_out = float(a_in);

	vec4 out_color = vec4(r_out, g_out, b_out, a_out);

	imageStore(output_image, pixel, out_color);
}

